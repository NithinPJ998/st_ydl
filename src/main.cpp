#include <iostream>
#include <string>

#include <boost/thread.hpp>
#include <boost/chrono.hpp>

#include "st_ydl.hpp"

// file is generated by cmake
#include <st_ydl_version.h>

using namespace std;

// Funktion which is called by the threads.
void thread_call(STydl *t, int x)
{
    (*t)[x];
}

int main(int argc, const char **argv)
{
    if (argc != 2)
    {
        cerr << "Error:" << endl <<"\tPlease enter one file name, " << endl
             << "\tor display the version number with '-v' '--version'" << endl;
        exit(EXIT_FAILURE);
    }

    if (string(argv[1]) == "-v" || string(argv[1]) == "--version")
    {
        cout << "VERSION: " << ST_YDL_VERSION << endl;
        exit(EXIT_SUCCESS);
    }

    STydl *yt_vid = new STydl(argv[1]);

    // Number of all downloads.
    int cnt = ~(*yt_vid);

    // Create two Threads
    boost::thread *t1 = nullptr;
    boost::thread *t2 = nullptr;

    int i = 0;
    // As long as i < cnt execute the thread clean it up when the thread was executed and recreate it
    while (i < cnt)
    {
        boost::this_thread::sleep_for(boost::chrono::seconds(3));

        if (t1 != nullptr)
        {
            if (t1->try_join_for(boost::chrono::milliseconds(10)))
            {
                t1->join();
                delete t1;
                t1 = nullptr;
            }
        }
        if (t1 == nullptr)
            t1 = new boost::thread(thread_call, yt_vid, i++);

        if (t2 != nullptr)
        {
            if (t2->try_join_for(boost::chrono::milliseconds(10)))
            {
                t2->join();
                delete t2;
                t2 = nullptr;
            }
        }
        if (t2 == nullptr)
            t2 = new boost::thread(thread_call, yt_vid, i++);
    }

    // Wait for both threads
    t1->join();
    t2->join();

    delete yt_vid;
    
    exit(EXIT_SUCCESS);
}